функция Аккермана
Функция Аккермана — это математическая функция, которая демонстрирует, как можно создавать очень сложные и быстро растущие вычисления 
с помощью простых рекурсивных правил.

Простое объяснение
Рекурсия: Функция вызывает сама себя с другими параметрами, пока не достигнет определенного условия, когда она не будет больше себя вызывать.
Математические правила: Функция определяется с помощью нескольких условий, в зависимости от значений двух чисел, m и n.

Функция Аккермана определяется так:

n + 1  если m = 0
A(m − 1,1)  если   m > 0 и n = 0
A(m - 1, A(m, n - 1))  если  m > 0 и n > 0
 
Пояснение шаг за шагом
Первое условие: Если m равно 0, результатом функции будет n +1.

Пример: A(0, 5) = 5 + 1 = 6.
Второе условие: Если m больше 0, а n равно 0, функция вызывает сама себя с параметрами(m -1, 1).

Пример: A(2, 0) вызывает A(1, 1).
Третье условие: Если и m, и n больше 0, функция вызывает сама себя дважды:

    Сначала с параметрами(m, n - 1).
Затем результат этой вызванной функции используется для нового вызова функции с параметрами(m -1, < результат первого вызова>).
Пример: A(2, 1) вызывает A(2, 0), что затем вызывает A(1, 1), и так далее.
Пример
Рассмотрим вычисление A(1, 2):

A(1, 2) = A(0, A(1, 1))
A(1, 1) = A(0, A(1, 0))
A(1, 0) = A(0, 1) = 2
Поэтому, A(1, 1) = A(0, 2) = 3
И, наконец, A(1, 2) = A(0, 3) = 4

// Задача 2: Напишите программу вычисления функции Аккермана с помощью рекурсии. 
// Даны два неотрицательных числа m и n.


// Ввод значений m и n
Console.Write("Введите значение m: ");
int m = int.Parse(Console.ReadLine());

Console.Write("Введите значение n: ");
int n = int.Parse(Console.ReadLine());

// Вычисление и вывод результата функции Аккермана
int result = Ackermann(m, n);
Console.WriteLine($"Ackermann({m}, {n}) = {result}");


// Рекурсивная функция Аккермана
int Ackermann(int m, int n)
{
    if (m == 0)
    {
        return n + 1;
    }
    else if (m > 0 && n == 0)
    {
        return Ackermann(m - 1, 1);
    }
    else
    {
        return Ackermann(m - 1, Ackermann(m, n - 1));
    }
}
