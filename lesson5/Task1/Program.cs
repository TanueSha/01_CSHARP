// ЗАДАЧА 1
// ВЫЧИСЛИТЬ ФАКТОРИАЛ ОТ НАТУРАЛЬНОГО ЧИСЛА N

// Факториал числа n - это произведение всех натуральных чисел
// N! = 1 * 2 * 3 * ... * n
// 3! = 3 * 2 * 1 = 6
// 5! = 1 * 2 * 3 * 4 * 5 = 120
// 1! = 1
// 0! = 1

// Этапы создания рекурсии:
// 1. рекурсивный вызов
// (N - 1)! - более простая задача, которую можно решить рекурсией. Вычислить его от меньшего числа, чем исходное.

// 2. как использовать решение простой задачи в рекурсивном вызове
// N! = N*(N-1)*...*1 - представим формулу факториала иначе - переставим сомножители наоборот, т.е. от большего числа к наименьшему. Помним, что перестановка сомножителей на результат не влияет. 
// посмотрим, можим ли в этой формуле ипользовать формулу (N - 1)!
// последние (N-1)*...*1 составляют формулу для решения простой задачи (N - 1)!
// N! = N * (N - 1)!

// 3. условие остановки рекурсии. 
// 3! = 3 * 2! 
// 2! = 2 * 1!
// 1! = 1

int Fact(int n)
{
    if (n == 1 || n == 0) // для проверки на тривиальность
    {
        return 1; // факториал 1 равен 1
    }
    return n * Fact(n - 1); // можно было бы  return n * (n - 1)! Но ! - в программе используется для других операций

}

Console.WriteLine(Fact(5)); // вызов рекурсивной функции

// * факториалы с помощью рекурсий обычно не испотзуются
// для этого есть более простое решение с приминением цикла

int FactLoop(int n)
{
    int result = 1;
    for (int i = 2; i <= n; i++)
    {
        result *= i;
    }
    return result;
}

// цикл for используется, когда количество итераций известно заранее

// чтобы посмотреть, что происходит при работе этой функции, добавим отладочный вывод на консоль

int Fact(int n)
{
    if (n == 1 || n == 0) 
    {
        Console.WriteLine($"Stop requrson: n = {n}"); // чтобы понять, что мы попалив условие if добавляем отладочный вывод на экран
        return 1; 
    }
    Console.WhriteLine(n); // Выводим значение параметра в начале функции
    return n * Fact(n - 1); 
}

Console.WriteLine(Fact(5));